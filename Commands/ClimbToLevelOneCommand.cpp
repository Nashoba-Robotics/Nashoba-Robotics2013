// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.

#include "SmartDashboard/SmartDashboard.h"
#include "ArticulatedDeployCommand.h"
#include "ArticulatedExtendCommand.h"
#include "ArticulatedIdleCommand.h"
#include "ArticulatedUndeployCommand.h"
#include "ArticulatedUnextendCommand.h"
#include "AutonomousCommand.h"
#include "CancelAllCommand.h"
#include "TrackClimbDistanceCommand.h"
#include "ClimbToLevelOneCommand.h"
#include "ClimbToLevelTwoCommand.h"
#include "CompressorIdleCommand.h"
#include "CompressorStartCommand.h"
#include "CompressorStopCommand.h"
#include "DriveBrakeCommand.h"
#include "DriveDriveCommand.h"
#include "FeetDeployCommand.h"
#include "FeetIdleCommand.h"
#include "FeetUndeployCommand.h"
#include "FixedDeployCommand.h"
#include "FixedIdleCommand.h"
#include "FixedUndeployCommand.h"
#include "ShooterIdleCommand.h"
#include "ShooterLoadCommand.h"
#include "ShooterStopCommand.h"
#include "TippingDeployCommand.h"
#include "TippingIdleCommand.h"
#include "TrackDriveDownUntilForceCommand.h"
#include "TrackDriveSpeedCommand.h"
#include "TrackIdleCommand.h"
#include "TrackDriveDownUntilFeetHitCommand.h"

ClimbToLevelOneCommand::ClimbToLevelOneCommand() 
{
	//Aligned and the beam break is broken and angel wings out
	AddSequential(new TippingDeployCommand());
	
	AddParallel(new TrackDriveDownUntilForceCommand());
	AddParallel(new ArticulatedDeployCommand());
	AddSequential(new FixedDeployCommand());
	
	AddSequential(new TrackClimbDistanceCommand(9001)); //TODO Climb the correct distance
	
	AddSequential(new ArticulatedUndeployCommand());
	
	AddSequential(new TrackClimbDistanceCommand(9001)); //TODO Climb the correct distance
	
	AddSequential(new ArticulatedDeployCommand());
	
	AddSequential(new FixedUndeployCommand());
	
	AddSequential(new TrackClimbDistanceCommand(9001)); //TODO Climb the correct distance
	
	AddSequential(new FixedDeployCommand());
	
	AddSequential(new TrackClimbDistanceCommand(9001));//TODO Climb the correct distance
	
	AddParallel(new FeetDeployCommand());
	AddSequential(new TrackDriveDownUntilFeetHitCommand());
	
	AddSequential(new TrackClimbDistanceCommand(9001));//TODO Climb the correct distance
		
	AddSequential(new FixedUndeployCommand());
	
	AddSequential(new TrackClimbDistanceCommand(9001));//TODO Climb the correct distance
	
	AddSequential(new FixedDeployCommand());
	
	AddSequential(new ArticulatedUndeployCommand());
	
	AddSequential(new TrackClimbDistanceCommand(9001));//TODO Climb the correct distance
		
	AddSequential(new ArticulatedDeployCommand());
	
	AddSequential(new FixedUndeployCommand());
	
	AddParallel(new ArticulatedExtendCommand());
	AddSequential(new TrackClimbDistanceCommand(9001));//TODO Move mantle correct amount
	
	AddSequential(new ArticulatedUnextendCommand());
	
	AddSequential(new FixedDeployCommand());
	
	AddSequential(new TrackDriveDownUntilForceCommand());
	// Add Commands here:
	// e.g. AddSequential(new Command1());
	//      AddSequential(new Command2());
	// these will run in order.

	// To run multiple commands at the same time,
	// use AddParallel()
	// e.g. AddParallel(new Command1());
	//      AddSequential(new Command2());
	// Command1 and Command2 will run in parallel.

	// A command group will require all of the subsystems that each member
	// would require.
	// e.g. if Command1 requires chassis, and Command2 requires arm,
	// a CommandGroup containing them would require both the chassis and the
	// arm.
}
