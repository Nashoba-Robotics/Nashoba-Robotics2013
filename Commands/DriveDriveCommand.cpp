// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "DriveDriveCommand.h"
#define USE_BIG_STICK
DriveDriveCommand::DriveDriveCommand() : Command("Drive Drive Command")
{
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drive);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// Called just before this Command runs the first time
void DriveDriveCommand::Initialize() 
{
	lastExecuteTime = Timer::GetFPGATimestamp();
}
// Called repeatedly when this Command is scheduled to run
void DriveDriveCommand::Execute() 
{
	
	/*SmartDashboard::PutNumber("Left Stick X Axis", Robot::oi->getPadRawAxis(Gamepad::kLeftXAxis));
	SmartDashboard::PutNumber("Left Stick Y Axis", Robot::oi->getPadRawAxis(Gamepad::kLeftYAxis));
	SmartDashboard::PutNumber("Right Stick X Axis", Robot::oi->getPadRawAxis(Gamepad::kRightXAxis));
	SmartDashboard::PutNumber("Right Stick Y Axis", Robot::oi->getPadRawAxis(Gamepad::kRightYAxis));
	SmartDashboard::PutNumber("D-Pad X Axis", Robot::oi->getPadRawAxis(Gamepad::kDPadXAxis));
	SmartDashboard::PutNumber("D-Pad Y Axis", Robot::oi->getPadRawAxis(Gamepad::kDPadYAxis));
	
	USED FOR GAMEPAD
	if(Robot::oi->getPadRawAxis(Gamepad::kDPadXAxis) != 0 || Robot::oi->getPadRawAxis(Gamepad::kDPadYAxis) != 0)
	{
		Robot::drive->driveMecanum(0.5, 0, -(Robot::oi->getPadRawAxis(Gamepad::kRightXAxis)));
	}
	else
		Robot::drive->driveMecanum((Robot::oi->getPadRawAxis(Gamepad::kLeftXAxis)), 
				(Robot::oi->getPadRawAxis(Gamepad::kLeftYAxis)), -(Robot::oi->getPadRawAxis(Gamepad::kRightXAxis)));*/
	
	double currentTime = Timer::GetFPGATimestamp();
	SmartDashboard::PutNumber("Delta Drive Invocation", currentTime - lastExecuteTime);
	lastExecuteTime = currentTime;
	
	/*if(Robot::oi->getPadRawAxis(Gamepad::kDPadXAxis)  > 0)
	{
		
		Robot::drive->driveMecanum(-0.2, 0, 0);
	}
	else if(Robot::oi->getPadRawAxis(Gamepad::kDPadXAxis) < 0)
		Robot::drive->driveMecanum(0.2, 0, 0);
	else
	{*/
		SmartDashboard::PutNumber("Big Stick X", Robot::oi->getBigStickX());
		SmartDashboard::PutNumber("Big Stick Y", Robot::oi->getBigStickY());
		
		/*snapx = (Robot::oi->getBigStickX() > 0.08) ? Robot::oi->getBigStickX() : 0;
		snapy = (Robot::oi->getBigStickY() > 0.08) ? Robot::oi->getBigStickY() : 0;
		snapz = (Robot::oi->getBigStickX() > 0.08) ? Robot::oi->getBigStickZ() : 0;
		Robot::drive->driveMecanum(snapx, snapy, snapz);*/
		
		//Robot::drive->driveMecanum(Robot::oi->getBigStickX(), -Robot::oi->getBigStickY(),-Robot::oi->getBigStickZ());
		//Robot::drive->driveMecanum(Robot::oi->getPadRawAxis(Gamepad::kLeftXAxis)/2, -Robot::oi->getPadRawAxis(Gamepad::kLeftYAxis)/2, (-Robot::oi->getPadRawAxis(Gamepad::kRightXAxis)/2));
		Robot::drive->driveMecanum(0,0,0);
		//}
}
// Make this return true when this Command no longer needs to run execute()
bool DriveDriveCommand::IsFinished() 
{
	return false;
}
// Called once after isFinished returns true
void DriveDriveCommand::End() {
	
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveDriveCommand::Interrupted() {
}
