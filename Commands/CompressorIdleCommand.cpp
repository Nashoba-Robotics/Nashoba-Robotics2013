// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "CompressorIdleCommand.h"
#include "CompressorStopCommand.h"
#include "CompressorStartCommand.h"
#include "../Gamepad.hpp"
CompressorIdleCommand::CompressorIdleCommand(bool automatic) 
{
	mAutomatic = automatic;
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::pneumaticsCompressor);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// Called just before this Command runs the first time
void CompressorIdleCommand::Initialize() {
	
}
// Called repeatedly when this Command is scheduled to run
void CompressorIdleCommand::Execute() 
{
	SmartDashboard::PutBoolean("Joystick x button", Robot::oi->GetPadButton(1));
	SmartDashboard::PutNumber("Pressure Limit Sensor", RobotMap::highPressureLimitSensor->Get());
	SmartDashboard::PutBoolean("Compressor Relay Check", RobotMap::compressorRelay->CheckRelayChannel(1));
	SmartDashboard::PutBoolean("Compressor Module Check", RobotMap::compressorRelay->CheckDigitalModule(1));
	if(RobotMap::highPressureLimitSensor->Get() > 0)
	{
		RobotMap::compressorRelay->Set(Relay::kOff);
	}
	else
	{
		if(mAutomatic)
			RobotMap::compressorRelay->Set(Relay::kOn);
	}
	
}
// Make this return true when this Command no longer needs to run execute()
bool CompressorIdleCommand::IsFinished() 
{
	return false;
}
// Called once after isFinished returns true
void CompressorIdleCommand::End() 
{
	
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void CompressorIdleCommand::Interrupted() 
{
	RobotMap::compressorRelay->Set(Relay::kOff);
}
