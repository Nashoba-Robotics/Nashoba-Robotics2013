// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Robot.h"
#define INCLUDE_ALL_SMARTDASHBOARD_INFO2

// Instead of Robot::, you could just do this->
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
Drive* Robot::drive = 0;
Shooter* Robot::shooter = 0;
Track* Robot::track = 0;
Tipping* Robot::tipping = 0;
ArticulatingArm* Robot::articulatingArm = 0;
FixedArm* Robot::fixedArm = 0;
Feet* Robot::feet = 0;
PneumaticsCompressor* Robot::pneumaticsCompressor = 0;
OI* Robot::oi = 0;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	drive = new Drive();
	shooter = new Shooter();
	track = new Track();
	tipping = new Tipping();
	articulatingArm = new ArticulatingArm();
	fixedArm = new FixedArm();
	feet = new Feet();
	pneumaticsCompressor = new PneumaticsCompressor();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi = new OI();
	lw = LiveWindow::GetInstance();
	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand = new AutonomousCommand();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	fieldTimerCheckCommand = new FieldTimerCheckCommand();
	SmartDashboard::PutData(drive);
  }
	
void Robot::AutonomousInit() 
{
	if (autonomousCommand != NULL)
		autonomousCommand->Start();
}
	
void Robot::AutonomousPeriodic() 
{
	Scheduler::GetInstance()->Run();
}
	
void Robot::TeleopInit() 
{
	dashboardCounter = 0;
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to 
	// continue until interrupted by another command, remove
	// this line or comment it out.
	autonomousCommand->Cancel();
	fieldTimerCheckCommand->Start();
}
//Runs 50 times a second
void Robot::TeleopPeriodic() 
{
	dashboardCounter++;
	/*
	double currentTime = Timer::GetFPGATimestamp();
	SmartDashboard::PutNumber("Delta Periodic Invocation", currentTime - lastExecuteTime);
	
	lastExecuteTime = currentTime;
	
	currentTime = Timer::GetFPGATimestamp();
	SmartDashboard::PutNumber("Scheduler Run duration", currentTime - lastExecuteTime);
	lastExecuteTime = currentTime;*/
	
	int timesPerSecond = (int)SmartDashboard::GetNumber("SD Times Per Second");
	if(timesPerSecond < 0)
	{
		timesPerSecond = 1;
	}
	int updateRate = (int)((50/timesPerSecond) + 0.5);
	if((dashboardCounter % updateRate) == 0)
	{
		SmartDashboard::PutBoolean("Fixed undeploy Limit", Robot::fixedArm->GetUndeployedLimit());
		SmartDashboard::PutBoolean("Fixed Deploy Limit", Robot::fixedArm->GetDeployedLimit());
		SmartDashboard::PutBoolean("Articulating undeploy Limit", Robot::articulatingArm->getUndeployLimit());
		SmartDashboard::PutBoolean("Articulating Deploy Limit", Robot::articulatingArm->getDeployedLimit());
		
		SmartDashboard::PutNumber("Track Quad Encoder Ticks", RobotMap::trackQuadratureEncoder1->Get());
		SmartDashboard::PutNumber("Track Quad Encoder Distance Inches", RobotMap::trackQuadratureEncoder1->GetDistance());
		//High Pressure Limit Sensor
		SmartDashboard::PutBoolean("Pressure Limit Sensor", RobotMap::pneumaticsCompressorDigitalInput1->Get());
		//Articulating Arm Slide Petentiometer
		SmartDashboard::PutNumber("Articulating Slide Potentiometer", RobotMap::articulatingArmSlidePetentiometer->GetVoltage());
		
		SmartDashboard::PutNumber("Gyro Sensor", Robot::drive->getGyroAngle());
		SmartDashboard::PutNumber("Track Analog Force 1", RobotMap::trackAnalogForce1->GetVoltage());
		SmartDashboard::PutNumber("Track Analog Force 2", RobotMap::trackAnalogForce2->GetVoltage());
		
		if(Robot::articulatingArm->getArmUnextended())
			SmartDashboard::PutString("Articulating Extend State", "Unextended");
		else if(Robot::articulatingArm->getArmExtended())
			SmartDashboard::PutString("Articulating Extend State", "Extended");
		else
			SmartDashboard::PutString("Articulating Extend State", "In Transit");
		
		//Feet
		SmartDashboard::PutNumber("Feet Limit 1", RobotMap::feetFeetLimit1->Get());
		SmartDashboard::PutNumber("Feet Analog Force 2", RobotMap::feetAnalogForce2->GetVoltage());
		
		//Subsystems
		// I would use this-> instead of Robot::
		SmartDashboard::PutData(Robot::feet);
		SmartDashboard::PutData(Robot::drive);
		SmartDashboard::PutData(Robot::articulatingArm);
		SmartDashboard::PutData(Robot::fixedArm);
		SmartDashboard::PutData(Robot::track);
		SmartDashboard::PutData(Robot::shooter);
	}
	if (autonomousCommand != NULL)
		Scheduler::GetInstance()->Run();
	
}
void Robot::TestPeriodic() 
{
//	lw->Run();
}
START_ROBOT_CLASS(Robot);
