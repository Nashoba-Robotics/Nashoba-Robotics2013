// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
Relay* RobotMap::compressorRelay = NULL;
DigitalInput* RobotMap::highPressureLimitSensor = NULL;
Arduino_I2C* RobotMap::arduino = NULL;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
CANJaguar* RobotMap::driveCANJaguar1 = NULL;
CANJaguar* RobotMap::driveCANJaguar2 = NULL;
CANJaguar* RobotMap::driveCANJaguar3 = NULL;
CANJaguar* RobotMap::driveCANJaguar4 = NULL;
RobotDrive* RobotMap::driveRobotDrive41 = NULL;
Encoder* RobotMap::driveEncoder1 = NULL;
Encoder* RobotMap::driveQuadratureEncoder2 = NULL;
Encoder* RobotMap::driveQuadratureEncoder3 = NULL;
Encoder* RobotMap::driveQuadratureEncoder4 = NULL;
DigitalInput* RobotMap::driveDigitalInput1 = NULL;
DoubleSolenoid* RobotMap::shooterDoubleSolenoid1 = NULL;
Encoder* RobotMap::trackQuadratureEncoder1 = NULL;
Encoder* RobotMap::trackQuadratureEncoder2 = NULL;
SpeedController* RobotMap::trackSpeedController1 = NULL;
SpeedController* RobotMap::trackSpeedController2 = NULL;
Solenoid* RobotMap::angelWingsSolenoid1 = NULL;
Solenoid* RobotMap::tippingSolenoid1 = NULL;
CANJaguar* RobotMap::articulatingArmCANJaguar1 = NULL;
Encoder* RobotMap::articulatingArmQuadratureEncoder1 = NULL;
DigitalInput* RobotMap::articulatingArmDigitalInput1 = NULL;
Solenoid* RobotMap::articulatingArmSolenoid1 = NULL;
DigitalInput* RobotMap::fixedArmDigitalInput1 = NULL;
Solenoid* RobotMap::fixedArmSolenoid1 = NULL;
DigitalInput* RobotMap::feetDigitalInput1 = NULL;
DigitalInput* RobotMap::feetDigitalInput2 = NULL;
Solenoid* RobotMap::feetSolenoid1 = NULL;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
void RobotMap::init() 
{
	arduino = new Arduino_I2C(1);
	
	compressorRelay = new Relay(1, Relay::kForwardOnly);
	highPressureLimitSensor = new DigitalInput(1);
	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();
	driveCANJaguar1 = new CANJaguar(2);
	
	
	driveCANJaguar2 = new CANJaguar(3);
	
	
	driveCANJaguar3 = new CANJaguar(4);
	
	
	driveCANJaguar4 = new CANJaguar(5);
	
	
	driveRobotDrive41 = new RobotDrive(driveCANJaguar1, driveCANJaguar2,
              driveCANJaguar3, driveCANJaguar4);
	
	driveRobotDrive41->SetSafetyEnabled(true);
        driveRobotDrive41->SetExpiration(0.1);
        driveRobotDrive41->SetSensitivity(0.5);
        driveRobotDrive41->SetMaxOutput(1.0);
	driveEncoder1 = new Encoder(1, 1, 1, 2, false, Encoder::k4X);
	lw->AddSensor("Drive", "Encoder1", driveEncoder1);
	driveEncoder1->SetDistancePerPulse(1.0);
        driveEncoder1->SetPIDSourceParameter(Encoder::kRate);
        driveEncoder1->Start();
	driveQuadratureEncoder2 = new Encoder(1, 3, 1, 4, false, Encoder::k4X);
	lw->AddSensor("Drive", "Quadrature Encoder 2", driveQuadratureEncoder2);
	driveQuadratureEncoder2->SetDistancePerPulse(1.0);
        driveQuadratureEncoder2->SetPIDSourceParameter(Encoder::kRate);
        driveQuadratureEncoder2->Start();
	driveQuadratureEncoder3 = new Encoder(1, 5, 1, 6, false, Encoder::k4X);
	lw->AddSensor("Drive", "Quadrature Encoder 3", driveQuadratureEncoder3);
	driveQuadratureEncoder3->SetDistancePerPulse(1.0);
        driveQuadratureEncoder3->SetPIDSourceParameter(Encoder::kRate);
        driveQuadratureEncoder3->Start();
	driveQuadratureEncoder4 = new Encoder(1, 7, 1, 8, false, Encoder::k4X);
	lw->AddSensor("Drive", "Quadrature Encoder 4", driveQuadratureEncoder4);
	driveQuadratureEncoder4->SetDistancePerPulse(1.0);
        driveQuadratureEncoder4->SetPIDSourceParameter(Encoder::kRate);
        driveQuadratureEncoder4->Start();
	driveDigitalInput1 = new DigitalInput(2, 5);
	lw->AddSensor("Drive", "Digital Input 1", driveDigitalInput1);
	
	shooterDoubleSolenoid1 = new DoubleSolenoid(1, 1, 2);      
	
	
	trackQuadratureEncoder1 = new Encoder(1, 11, 1, 12, false, Encoder::k4X);
	lw->AddSensor("Track", "Quadrature Encoder 1", trackQuadratureEncoder1);
	trackQuadratureEncoder1->SetDistancePerPulse(1.0);
        trackQuadratureEncoder1->SetPIDSourceParameter(Encoder::kRate);
        trackQuadratureEncoder1->Start();
	trackQuadratureEncoder2 = new Encoder(1, 14, 2, 1, false, Encoder::k4X);
	lw->AddSensor("Track", "Quadrature Encoder 2", trackQuadratureEncoder2);
	trackQuadratureEncoder2->SetDistancePerPulse(1.0);
        trackQuadratureEncoder2->SetPIDSourceParameter(Encoder::kRate);
        trackQuadratureEncoder2->Start();
	trackSpeedController1 = new Victor(1, 1);
	lw->AddActuator("Track", "Speed Controller 1", (Victor*) trackSpeedController1);
	
	trackSpeedController2 = new Victor(1, 2);
	lw->AddActuator("Track", "Speed Controller 2", (Victor*) trackSpeedController2);
	
	angelWingsSolenoid1 = new Solenoid(1, 3);
	lw->AddActuator("Angel Wings", "Solenoid 1", angelWingsSolenoid1);
	
	tippingSolenoid1 = new Solenoid(1, 4);
	lw->AddActuator("Tipping", "Solenoid 1", tippingSolenoid1);
	
	articulatingArmCANJaguar1 = new CANJaguar(6);
	
	
	articulatingArmQuadratureEncoder1 = new Encoder(1, 9, 1, 10, false, Encoder::k4X);
	lw->AddSensor("Articulating Arm", "Quadrature Encoder 1", articulatingArmQuadratureEncoder1);
	articulatingArmQuadratureEncoder1->SetDistancePerPulse(1.0);
        articulatingArmQuadratureEncoder1->SetPIDSourceParameter(Encoder::kRate);
        articulatingArmQuadratureEncoder1->Start();
	articulatingArmDigitalInput1 = new DigitalInput(1, 13);
	lw->AddSensor("Articulating Arm", "Digital Input 1", articulatingArmDigitalInput1);
	
	articulatingArmSolenoid1 = new Solenoid(1, 5);
	lw->AddActuator("Articulating Arm", "Solenoid 1", articulatingArmSolenoid1);
	
	fixedArmDigitalInput1 = new DigitalInput(2, 2);
	lw->AddSensor("Fixed Arm", "Digital Input 1", fixedArmDigitalInput1);
	
	fixedArmSolenoid1 = new Solenoid(1, 6);
	lw->AddActuator("Fixed Arm", "Solenoid 1", fixedArmSolenoid1);
	
	feetDigitalInput1 = new DigitalInput(2, 3);
	lw->AddSensor("Feet", "Digital Input 1", feetDigitalInput1);
	
	feetDigitalInput2 = new DigitalInput(2, 4);
	lw->AddSensor("Feet", "Digital Input 2", feetDigitalInput2);
	
	feetSolenoid1 = new Solenoid(1, 7);
	lw->AddActuator("Feet", "Solenoid 1", feetSolenoid1);
	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
